import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, PermissionsAndroid, Platform, StyleSheet } from 'react-native';
import { BleManager, Device } from 'react-native-ble-plx';
import { Buffer } from 'buffer';
import AsyncStorage from "@react-native-async-storage/async-storage";
import axios from "axios";
import Constants from 'expo-constants';

// Configuration des UUID de service et caract√©ristique
const SERVICE_UUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E";
const RX_CHARACTERISTIC_UUID = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E";
const ANIMATION_MATRICES: number[][] = [
  [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x40, 0x08, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0xc8, 0x40, 0xe8, 0xc0, 0xc0, 0x40, 0xc0, 0x40, 
    0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x08, 0x60, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x98, 0x0c, 0xe4, 0x6c, 0x1c, 0x30, 0x30, 0x18, 0x18, 0x08, 
    0x0c, 0x04, 0x84, 0x06, 0x06, 0x83, 0x01, 0x07, 0x0f, 0x3f, 0x3f, 0x1f, 0x1e, 0x3c, 0xc6, 0xc3, 
    0x70, 0x70, 0x70, 0x70, 0x70, 0xe1, 0x01, 0x03, 0x06, 0x3c, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 
    0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x7a, 0x70, 0x78, 
    0x30, 0x20, 0x00, 0x08, 0x10, 0x00, 0x07, 0x16, 0x09, 0x0f, 0x09, 0x06, 0x80, 0x00, 0x80, 0x6a, 
    0x10, 0x00, 0x01, 0xff, 0x00, 0x00, 0xa0, 0x30, 0x10, 0x33, 0x22, 0xc2, 0x02, 0x02, 0xc3, 0x42, 
    0x42, 0x42, 0x7e, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 
    0x00, 0x55, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x7f, 
    0xbf, 0x2f, 0x07, 0x07, 0x06, 0x02, 0x00, 0x00, 0x04, 0x00, 0x70, 0x34, 0x48, 0xfc, 0x48, 0x30, 
    0x00, 0x00, 0x00, 0x23, 0x08, 0x00, 0xc0, 0xf7, 0x00, 0x00, 0x01, 0x06, 0x02, 0xe6, 0x22, 0x21, 
    0x20, 0x20, 0x20, 0x21, 0x21, 0x21, 0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x07, 0x0e, 0x18, 0x13, 0x1b, 0x1c, 0x06, 0x06, 0x0c, 0x0c, 0x08, 0x18, 0x10, 0x18, 0x30, 
    0x30, 0x60, 0x40, 0x78, 0x78, 0x7e, 0x7e, 0x3e, 0x3c, 0x1f, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 
    0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x0a, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x02, 
    0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x0a, 0x04, 0x02, 
    0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 
    0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x0b, 0x04, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
  [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x08, 0x00, 0x28, 0x00, 0x20, 0x00, 
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x50, 0x28, 0x00, 0x28, 0x00, 0x20, 0x00, 0x20, 
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 
    0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x50, 0x28, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x98, 0x4c, 0xe4, 0x4c, 0x38, 0x30, 0x10, 0x18, 
    0x08, 0x0c, 0x0c, 0x04, 0x86, 0x06, 0x83, 0x87, 0x1f, 0x1f, 0x3f, 0x3f, 0x3e, 0x1e, 0xf8, 0xf8, 
    0x78, 0x3c, 0x1c, 0x3c, 0x64, 0x84, 0x0c, 0x08, 0x18, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xa0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x7e, 0x3a, 
    0x38, 0x38, 0x30, 0x00, 0x00, 0x08, 0x00, 0x07, 0x0a, 0x05, 0x0f, 0x09, 0x06, 0xc0, 0x00, 0xc0, 
    0x2a, 0x00, 0x01, 0x05, 0xf2, 0x00, 0x40, 0x20, 0x30, 0x33, 0x32, 0x22, 0x42, 0x02, 0x83, 0xc2, 
    0xe2, 0xc2, 0xda, 0xfe, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 
    0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x60, 0x2f, 0xff, 0x97, 0x07, 0x07, 0x03, 0x00, 0x00, 0x04, 0x00, 0x38, 0x24, 0x28, 0x7c, 0x44, 
    0x38, 0x00, 0x00, 0x00, 0x15, 0x08, 0x00, 0xe8, 0xd3, 0x00, 0x01, 0x01, 0x03, 0x92, 0xf3, 0xf1, 
    0xf0, 0x10, 0x10, 0x10, 0x11, 0x11, 0x17, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x03, 0x06, 0x0d, 0x09, 0x0d, 0x06, 0x07, 0x06, 0x06, 0x04, 0x0c, 0x08, 0x08, 
    0x18, 0x38, 0x30, 0x38, 0x3e, 0x3e, 0x3e, 0x3f, 0x1e, 0x1e, 0x0f, 0x81, 0x01, 0x07, 0x06, 0x06, 
    0x04, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x02, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x05, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
  [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x8c, 0xa6, 0x72, 0x26, 0x0c, 0x18, 0x18, 0x0c, 0x0c, 0x04, 
    0x06, 0x02, 0x82, 0x43, 0x03, 0xc1, 0xc1, 0x83, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1e, 0xf8, 
    0xf0, 0x78, 0x08, 0x0c, 0x0c, 0x04, 0x3c, 0x7c, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xfd, 0x7f, 0x7a, 0x38, 0x78, 
    0x30, 0x20, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0f, 0x0f, 0x08, 0x04, 0x83, 0x00, 0x00, 0xc0, 
    0x22, 0x0c, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0xc0, 0x20, 0x30, 0x32, 0x31, 0x23, 0xc3, 0x01, 0x03, 
    0xc1, 0xe3, 0xc1, 0xe3, 0xdd, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x7f, 
    0x7f, 0x2f, 0x07, 0x0f, 0x06, 0x02, 0x00, 0x00, 0x08, 0x00, 0xf0, 0x08, 0x78, 0xec, 0xc8, 0x08, 
    0x70, 0x00, 0x00, 0x00, 0x23, 0x1c, 0x80, 0xc0, 0xfc, 0x03, 0x00, 0x01, 0x02, 0x06, 0xe2, 0x26, 
    0x23, 0x21, 0x20, 0xe0, 0xe0, 0x21, 0x21, 0x21, 0x2d, 0x3f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x1f, 0x18, 0x31, 0x37, 0x33, 0x38, 0x0c, 0x0e, 0x0c, 0x18, 0x18, 0x30, 0x30, 0x30, 0x30, 
    0x70, 0x40, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfc, 0x3c, 0x3c, 0x1f, 0x1f, 0x1f, 0x3f, 0x3c, 0x38, 
    0x34, 0x37, 0x31, 0x30, 0x38, 0x18, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
];

const REACT_NATIVE_SERVER_IP = Constants.expoConfig?.extra?.REACT_NATIVE_SERVER_IP;

if (!REACT_NATIVE_SERVER_IP) {
  throw new Error('REACT_NATIVE_SERVER_IP is not defined in app.config.js or app.json');
}

// Fonction pour convertir une matrice de bits en tableau d'octets
function convertMatrixToByteArray(matrix: number[]): number[] {
  const byteArray = [];

  for (let i = 0; i < matrix.length; i += 8) {
    let byte = 0;
    for (let j = 0; j < 8; j++) {
      byte <<= 1;
      byte |= matrix[i + j] ? 1 : 0;
    }
    byteArray.push(byte);
  }

  return byteArray;
}

const BluetoothImageSender = () => {
  const [bleManager] = useState(new BleManager());
  const [connectedDevice, setConnectedDevice] = useState<Device | null>(null);
  const [status, setStatus] = useState("Pr√™t √† scanner");
  const [matrice, setMatrice] = useState<number[] | null>(null);

  // Cr√©ation de donn√©es d'image avec la matrice r√©cup√©r√©e
  const createSimpleImageBuffers = (mat: number[]): Uint8Array[] => {
    const byteArray = convertMatrixToByteArray(mat);
    return [
      new Uint8Array([0x1B, 0x00, ...byteArray.slice(0, 166)]),   // Premier buffer
      new Uint8Array([0x1B, 0x01, ...byteArray.slice(166, 332)]), // Deuxi√®me buffer
      new Uint8Array([0x1B, 0x02, ...byteArray.slice(332, 498)])  // Troisi√®me buffer
    ];
  };

  useEffect(() => {
    requestPermissions();
    return () => {
      bleManager.destroy();
    };
  }, []);

  // const animateCharacter = async () => {
  //   if (!connectedDevice) {
  //     setStatus("Connectez un appareil d'abord");
  //     return;
  //   }
  
  //   try {
  //     setStatus("Animation en cours...");
  
  //     const animationFrames = await getCharactersAnimationMatrices();
  //     if (!animationFrames || animationFrames.length === 0) {
  //       setStatus("Aucune animation trouv√©e");
  //       return;
  //     }
  
  //     for (let cycle = 0; cycle < 3; cycle++) { // R√©p√©ter l'animation 3 fois
  //       for (const frame of animationFrames) {
  //         const buffers = createSimpleImageBuffers(frame);
  //         for (const buffer of buffers) {
  //           await sendBuffer(buffer);
  //           await new Promise(resolve => setTimeout(resolve, 200)); // D√©lai entre les paquets
  //         }
  //         await new Promise(resolve => setTimeout(resolve, 500)); // Pause entre chaque image
  //       }
  //     }
  
  //     // Apr√®s l'animation, r√©afficher l'image statique du personnage
  //     await sendImageToScreen();
  //     setStatus("Animation termin√©e");
  
  //   } catch (error) {
  //     console.error("Erreur d'animation :", error);
  //     setStatus("√âchec de l'animation");
  //   }
  // };
  
  const playAnimation = async () => {
    if (!connectedDevice) {
      setStatus("Connectez un appareil d'abord");
      return;
    }
  
    try {
      for (let i = 0; i < 3; i++) { // R√©p√®te l'animation 3 fois
        for (const mat of ANIMATION_MATRICES) {
          const buffers = [
            new Uint8Array([0x1B, 0x00, ...mat.slice(0, 166)]),
            new Uint8Array([0x1B, 0x01, ...mat.slice(166, 332)]),
            new Uint8Array([0x1B, 0x02, ...mat.slice(332, 498)])
          ];
  
          for (const buffer of buffers) {
            await sendBuffer(buffer);
            await new Promise(resolve => setTimeout(resolve, 200)); // D√©lai entre chaque envoi de partie
          }
  
          await sendBuffer(new Uint8Array([0x1C])); // Validation de l'affichage
          await new Promise(resolve => setTimeout(resolve, 500)); // D√©lai entre chaque frame
        }
      }
      setStatus("Animation termin√©e");
    } catch (error) {
      console.error("Erreur lors de l'animation :", error);
      setStatus("√âchec de l'animation");
    }
  };
  
  

  const API_URL = `http://${REACT_NATIVE_SERVER_IP}:5000/personnages`;
  // const getActiveCharacter = async () => {
  //   try {
  //     const token = await AsyncStorage.getItem("userToken");
  //     if (!token) {
  //       throw new Error("Token non trouv√©");
  //     }

  //     const response2 = await axios.get(`${API_URL2}/active`, {
  //       headers: { Authorization: `Bearer ${token}` },
  //     });

  //     console.log("REPONSE DE LAPI :",response2);
  //   } catch (error) {
  //     console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
  //     throw error;
  //   }
  // };

  const getCharactersMatrice = async (): Promise<number[]> => {
    try {
      const token = await AsyncStorage.getItem("userToken");
      if (!token) {
        throw new Error("Token non trouv√©");
      }

      const response = await axios.get(`${API_URL}/active`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      console.log("coucou", response.data);
      const hexMatrice = response.data.activePersonnage.matrice;
      const hexString = hexMatrice.map((h: string) => h.replace("0x", "")).join("");
      const bitArray: number[] = [];
      for (let i = 0; i < hexString.length; i += 2) {
        const byte = parseInt(hexString.substr(i, 2), 16);
        for (let j = 7; j >= 0; j--) {
          bitArray.push((byte >> j) & 1);
        }
      }

      setMatrice(bitArray);
      return bitArray;
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des donn√©es :", error);
      throw error;
    }
  };

  const requestPermissions = async () => {
    if (Platform.OS === 'android') {
      try {
        const granted = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
          PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT
        ]);

        const isPermissionsGranted = 
          granted[PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION] === 'granted' &&
          granted[PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN] === 'granted' &&
          granted[PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT] === 'granted';

        setStatus(isPermissionsGranted ? "Permissions BLE accord√©es" : "Permissions BLE refus√©es");
      } catch (err) {
        console.error("Erreur de permissions", err);
        setStatus("Erreur de permissions BLE");
      }
    }
  };

  const startScan = () => {
    setStatus("Scan en cours...");
    
    bleManager.startDeviceScan(null, null, async (error, device) => {
      if (error) {
        console.error("Erreur de scan :", error);
        setStatus("Erreur de scan");
        return;
      }

      if (device?.name === "SportsLab_Tamagochi") {
        bleManager.stopDeviceScan();
        
        try {
          const mat = await getCharactersMatrice();
          await connectToDevice(device);
        } catch (error) {
          console.error("Erreur lors de la r√©cup√©ration de la matrice :", error);
          setStatus("√âchec de r√©cup√©ration de la matrice");
        }
      }
    });
  
    setTimeout(() => {
      bleManager.stopDeviceScan();
      setStatus("Scan termin√©");
    }, 10000);
  };

  const connectToDevice = async (device: Device) => {
    try {
      setStatus(`Connexion √† ${device.name}...`);
      const connectedDevice = await bleManager.connectToDevice(device.id);
      await connectedDevice.discoverAllServicesAndCharacteristics();
      
      setConnectedDevice(connectedDevice);
      setStatus(`Connect√© √† ${connectedDevice.name}`);
    } catch (error) {
      console.error("Erreur de connexion :", error);
      setStatus("√âchec de connexion");
    }
  };
  
  const sendBuffer = async (buffer: Uint8Array) => {
    if (!connectedDevice) {
      console.error("Aucun appareil connect√©");
      return;
    }

    try {
      const base64Data = Buffer.from(buffer).toString("base64");
      await connectedDevice.writeCharacteristicWithoutResponseForService(
        SERVICE_UUID,
        RX_CHARACTERISTIC_UUID,
        base64Data
      );
      console.log(`Buffer envoy√©: ${buffer[1]}`);
    } catch (error) {
      console.error("Erreur d'envoi du buffer :", error);
    }
  };

  const sendImageToScreen = async () => {
    if (!connectedDevice) {
      setStatus("Connectez un appareil d'abord");
      return;
    }
  
    try {
      const updatedMatrice = await getCharactersMatrice();
      if (!updatedMatrice) {
        setStatus("Matrice non r√©cup√©r√©e");
        return;
      }
  
      const buffers = createSimpleImageBuffers(updatedMatrice);
  
      for (const buffer of buffers) {
        await sendBuffer(buffer);
        await new Promise(resolve => setTimeout(resolve, 200));
      }
  
      await sendBuffer(new Uint8Array([0x1C]));
      setStatus("Image envoy√©e");
    } catch (error) {
      console.error("Erreur lors de l'envoi de l'image :", error);
      setStatus("√âchec de l'envoi de l'image");
    }
  };
  

  const sendCommand = async (command: number, value: number = 0) => {
    if (!connectedDevice) return;

    try {
      const data = Buffer.from([command, value]);
      await connectedDevice.writeCharacteristicWithResponseForService(
        SERVICE_UUID,
        RX_CHARACTERISTIC_UUID,
        data.toString('base64')
      );
      console.log(`Commande envoy√©e : 0x${command.toString(16)} avec valeur ${value}`);
    } catch (error) {
      console.error("Erreur d'envoi de commande :", error);
    }
  };

  return (
    <View style={styles.container}>
    <Text style={styles.statusText}>{status}</Text>

    {!connectedDevice ? (
      <TouchableOpacity style={styles.button} onPress={startScan}>
        <Text style={styles.buttonText}>Scanner et se connecter</Text>
      </TouchableOpacity>
    ) : (
      <>
        <TouchableOpacity
          style={styles.button}
          onPress={async () => {
            try {
              const mat = await getCharactersMatrice();
              if (mat) {
                sendImageToScreen();
              }
            } catch (error) {
              console.error("Erreur lors de la mise √† jour de l'image :", error);
            }
          }}
        >
          <Text style={styles.buttonText}>Mettre √† jour et envoyer l'image</Text>
        </TouchableOpacity>
        {/* <TouchableOpacity style={styles.button} onPress={animateCharacter}>
          <Text style={styles.buttonText}>Lancer Animation</Text>
        </TouchableOpacity> */}
        <TouchableOpacity style={styles.button} onPress={playAnimation}>
          <Text style={styles.buttonText}>Jouer l'animation</Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={() => sendCommand(0x1D, 100)} style={{ padding: 10, backgroundColor: 'orange', margin: 5 }}>
          <Text style={{ color: 'white' }}>Changer contraste</Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={() => sendCommand(0x1E, 1)} style={{ padding: 10, backgroundColor: 'purple', margin: 5 }}>
          <Text style={{ color: 'white' }}>Allumer le r√©tro√©clairage</Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={() => sendCommand(0x1E, 0)} style={{ padding: 10, backgroundColor: 'black', margin: 5 }}>
          <Text style={{ color: 'white' }}>√âteindre le r√©tro√©clairage</Text>
        </TouchableOpacity>
      </>
    )}
  </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  statusText: {
    marginBottom: 20,
    fontSize: 16
  },
  button: {
    backgroundColor: '#007BFF',
    padding: 15,
    borderRadius: 10,
    marginVertical: 10
  },
  buttonText: {
    color: 'white',
    textAlign: 'center'
  }
});

export default BluetoothImageSender;