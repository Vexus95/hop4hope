const { sequelize } = require('../config/database');
const { Utilisateur, Personnage, Animation, Quete, Avoir, Possede } = require('../models');
const bcrypt = require('bcryptjs');

const populateDatabase = async () => {
    try {
        console.log("üîÑ Populating database with initial data...");

        // üåü Reset all tables (Optional: Use { force: true } to drop & recreate)
        await sequelize.sync({ alter: true });

        // üîπ Hash user passwords
        const hashedPassword = await bcrypt.hash("password123", 10);

        // üîπ Convert Hex Arrays to Hex Strings
        const hexArrayToString = (hexArray) => {
            return hexArray.map(byte => byte.toString(16).padStart(2, "0")).join("");
        };

        // üîπ Sample Hex Matrices for Personnages
        const warriorMatrice = hexArrayToString([0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xfc, 0x3e, 0x1e, 0x0e, 0x3e, 0xfc, 0xf8, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xf0, 0x30, 
            0x30, 0x70, 0xf0, 0xe0, 0xf0, 0x70, 0x30, 0x30, 0x70, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 
            0xfc, 0xff, 0xff, 0x70, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x01, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
            0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x0f, 0x3f, 0x3c, 0x1e, 0x0e, 0xfc, 0xf8, 
            0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xab, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
            0xf0, 0xfc, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0xaa, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 
            0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x03, 0x87, 0x1f, 0xbe, 0x38, 0xb0, 0x30, 
            0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0x30, 0xb0, 0xb0, 
            0x38, 0xbe, 0x1f, 0x87, 0x03, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 
            0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 
            0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0xaa]);
        const mageMatrice = hexArrayToString([0x01, 0x03, 0x00, 0xAC, 0xBB, 0x6B, 0x81, 0x88]);

        // üîπ Add Default Character Images
        const warriorImage = "https://example.com/warrior.png"; 
        const mageImage = "https://example.com/mage.png"; 

        // üîπ Create Sample Characters
        const characters = await Personnage.bulkCreate([
            { Nom: "Warrior", co√ªt: 100, matrice: warriorMatrice, image: warriorImage },
            { Nom: "Mage", co√ªt: 200, matrice: mageMatrice, image: mageImage }
        ]);
        console.log("‚úÖ Characters added.");

        // Set default character as the first one (Warrior)
        const defaultPersonnage = characters[0];

        // üîπ Sample Hex Matrices for Animations
        const attackMatrice = hexArrayToString([0x1F, 0x3A, 0x4B, 0x5C, 0x6D, 0x7E, 0x8F, 0x9A]);
        const defendMatrice = hexArrayToString([0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x11, 0x22]);

        // üîπ Create Sample Animations (Linked to Characters)
        const animations = await Animation.bulkCreate([
            { name: "Attack", matrice: attackMatrice, Id_personnage: defaultPersonnage.Id_personnage },
            { name: "Defend", matrice: defendMatrice, Id_personnage: characters[1].Id_personnage }
        ]);
        console.log("‚úÖ Animations added.");

        // Set default animation for the default personnage
        const defaultAnimation = animations[0];

        // Assign default animation to the default personnage
        await Personnage.update(
            { activeAnimationId: defaultAnimation.Id_animation },
            { where: { Id_personnage: defaultPersonnage.Id_personnage } }
        );

        // üîπ Create Sample Users with Default Active Personnage
        const users = await Utilisateur.bulkCreate([
            { 
                Nom: "John", Pr√©nom: "Doe", Email: "john@example.com",
                motdepasse: hashedPassword, points: 500, activePersonnageId: defaultPersonnage.Id_personnage
            },
            { 
                Nom: "Jane", Pr√©nom: "Smith", Email: "jane@example.com",
                motdepasse: hashedPassword, points: 800, activePersonnageId: defaultPersonnage.Id_personnage
            }
        ]);
        console.log("‚úÖ Users added with default active character.");

        // üîπ Assign Default Character to Each User
        for (const user of users) {
            await Possede.create({
                Id_utilisateur: user.Id_utilisateur,
                Id_personnage: defaultPersonnage.Id_personnage
            });
        }

        console.log("‚úÖ Default character assigned to users.");

        // üîπ Define Daily and Weekly Quests
        const quests = await Quete.bulkCreate([
            { 
                Nom: "Walk 500 Steps", 
                description: "Walk 500 steps today", 
                points: 50, 
                date_debut: new Date(), 
                date_fin: new Date(), 
                defaultGoal: 500,
                type: "daily" // ‚úÖ Daily quest
            },
            { 
                Nom: "Win 3 Battles", 
                description: "Win 3 battles in a week", 
                points: 200, 
                date_debut: new Date(), 
                date_fin: new Date(new Date().setDate(new Date().getDate() + 7)), // Ends in 7 days
                defaultGoal: 3,
                type: "weekly" // ‚úÖ Weekly quest
            }
        ]);
        console.log("‚úÖ Daily and Weekly Quests added.");

        // üîπ Assign Daily and Weekly Quests to John (User 1)
        const john = users[0];

        for (const quest of quests) {
            await Avoir.create({
                Id_utilisateur: john.Id_utilisateur,
                Id_quete: quest.Id_quete,
                currentProgress: 0, 
                goal: quest.defaultGoal,
                rewardClaimed: false
            });
        }

        console.log("‚úÖ Daily and Weekly quests assigned to John.");

        console.log("üéâ Database populated successfully!");
        process.exit();
    } catch (error) {
        console.error("‚ùå Error populating database:", error);
        process.exit(1);
    }
};

// Run the script
populateDatabase();
